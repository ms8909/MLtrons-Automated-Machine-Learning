"""
Django settings for mlbot_webservices project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '032&q1nu68z6a+$-p%--5aap_+4hok7@x)9*&0i)%mguo9m(r7'

ADMIN_SITE_HEADER = "Mlbot administrator"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '18.182.216.128', '192.168.244.130']



# Application definition

INSTALLED_APPS = [
    'rest_framework',
    # 'grappelli',
    'admin_reorder',
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'mlbot.apps.MlbotConfig',
    'project.apps.ProjectConfig',
    'accounts.apps.AccountsConfig',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'rest_framework_swagger',
    #'drf_yasg',
    'corsheaders',
    'oauth2_provider',
    #'django_extensions'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]


CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken',
    'mimeType',
    'cache-control',
    'enctype',
)


ROOT_URLCONF = 'mlbot_webservices.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}

EXPIRES_IN = 14400  # 4 Hr

AUTH_USER_MODEL = 'accounts.User'

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
        'guest': 'Anonymous User',
        'admin': 'Admin',
    },

    'ACCESS_TOKEN_EXPIRE_SECONDS': EXPIRES_IN,
    'DEFAULT_SCOPES': ['read', 'write', 'guest']
}

#online
APP_CLIENT_ID = 'yBrm2sLVDXqyfoM9XXaNFbqNJUQXVKgaHyQb7HM5'
APP_CLIENT_SECRET = 'BpvFORSCgTooxvUpOkhkVJCLjMaTzWdff8x4MwNSehwoAPaCFg6llCAdzIFndUzmsdx3sWFlUnI2r7O9cPqOef3xTx1S7Mhcf4GX6SXsHOvP420wSulMp1ViNVcKWeGq'

#offline
# APP_CLIENT_ID = 'OgJDwJ0OzCydbnNgBrV6gZYPONbfAlY3Vw9T5qqP'
# APP_CLIENT_SECRET = 'chF0RQTFro2NNNlsHXcU8PQQnSTk5qQJxFSbc3wYwYJD5LbJ2N6u22EDo84kBdA5ytWahlx4XmgBN7n904r5AJL9kAJanyfEUWbf98JdVXPnYwsFKhB99ag8sLRBGyOG'


WSGI_APPLICATION = 'mlbot_webservices.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.postgresql_psycopg2',
         'NAME': 'mltrons',
         'USER': 'postgres',
         'PASSWORD': 'postgres',
         'HOST': 'db',
         'PORT': '5432',
     }
}

#DATABASES = {
  #      'default': {
  #      'ENGINE': 'django.db.backends.postgresql_psycopg2',
  #      'NAME': 'mymltrons',
  #      'USER': 'mymltrons',
  #      'PASSWORD': 'mymltrons',
  #      'HOST': 'mymltrons.cordzuaud324.ap-northeast-1.rds.amazonaws.com',
  #      'PORT': '5432',
  #  }
#}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'oauth2'
        }
    },
    'APIS_SORTER': None,
    'DOC_EXPANSION': "list",
    'JSON_EDITOR': False,
    'OPERATIONS_SORTER': "alpha",
    'SHOW_REQUEST_HEADERS': True

}


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/


GS_ACCESS_KEY_ID = ''
GS_SECRET_ACCESS_KEY = ''
GS_PROJECT_ID = '876941683495'
GS_BUCKET_NAME = 'cloud101demo'
GOOGLE_STORAGE = 'gs'

GRAPPELLI_ADMIN_TITLE = 'MLtrons Cloud Console'
JET_SIDE_MENU_COMPACT = True



ADMIN_REORDER = (

    'sites',
    'auth',
    'groups',
    'mlbot',
    'oauth2_provider',

    {'app': 'project', 'label': ' Project ',
     'models': ('project.Project', 'project.DataSet',)
    },
    {'app': 'project', 'label': ' Graph ',
     'models': ('project.GraphType', 'project.Graph',)
    },
    {'app': 'project', 'label': ' Meta settings ',
     'models': ('project.MetaType',
                'project.MetaRole',
                'project.MetaImputation')
    },
    {'app': 'project', 'label': ' Prediction model settings ',
     'models': ('project.ProblemType','project.ForecastGroupBy', 'project.Metric', 'project.TimeType')
    },
)

JET_SIDE_MENU_ITEMS = [  # A list of application or custom item dicts
    {'label': 'Authentication and authorization', 'items': [
        {'name': 'accounts.user'},
        {'name': 'auth.group'},
    ]},
    {'app_label': 'oauth2_provider', 'items': [
        {'name': 'accesstoken'},
        {'name': 'application'},
        {'name': 'grant'},
        {'name': 'refreshtoken'},
    ]},
    {'app_label': 'mlbot', 'items': [
        {'name': 'registerquestion'},
    ]},
    {'label':'Project','app_label': 'project', 'items': [
        {'name': 'project'},
        {'name': 'dataset'},
    ]},
    {'label':'Meta settings', 'app_label': 'project', 'items': [
        {'name': 'metatype'},
        {'name': 'metarole'},
        {'name': 'metaimputation'},
    ]},
    {'label':'Prediction model settings', 'app_label': 'project', 'items': [
        {'name': 'problemtype'},
        {'name': 'forecastgroupby'},
        {'name': 'metric'},
        {'name': 'timetype'},
    ]},
    {'label':'Graphs', 'app_label': 'project', 'items': [
        {'name': 'graphtype'},
        {'name': 'graph'},
    ]},
]

S3_BUCKET = 'mltrons'
S3_CLIENT_ID = 'AKIAJFHAJ5DUZOUWMGPA'
S3_CLIENT_SECRET = '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'


# Celery application definition
CELERY_BROKER_URL = 'redis://the-redis:6379'
CELERY_RESULT_BACKEND = 'redis://the-redis:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'


PUSHER_ID = '469a4013ee4603be5010'
PUSHER_SECRET = '4d21503253a6d6e6b77f'


TRAINING_MODELS = 5

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'


STATICFILES_DIRS = (
    # os.path.join(BASE_DIR, "static"),
    # 'static/',
)
